#!/usr/bin/env python3
"""
Test script to verify Qwen service works with analysis templates
"""

import asyncio
import os
import sys

# Add the current directory to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_qwen_service():
    """Test the Qwen service with analysis templates"""
    try:
        print("üß™ Testing Qwen service with analysis templates...")
        
        # Test 1: Check if analysis templates are available
        print("\n1Ô∏è‚É£ Testing analysis templates import...")
        try:
            from analysis_templates import generate_analysis_prompt, ANALYSIS_TEMPLATES
            print("‚úÖ Analysis templates imported successfully")
            print(f"   Available templates: {list(ANALYSIS_TEMPLATES.keys())}")
            
            # Test prompt generation
            test_prompt = generate_analysis_prompt("comprehensive_analysis", "vehicle performance")
            print(f"‚úÖ Prompt generation successful (length: {len(test_prompt)} chars)")
            
        except ImportError as e:
            print(f"‚ùå Failed to import analysis templates: {e}")
            return False
        
        # Test 2: Check if Qwen service can be imported
        print("\n2Ô∏è‚É£ Testing Qwen service import...")
        try:
            from services.qwen25vl_service import qwen25vl_service
            print("‚úÖ Qwen service imported successfully")
            
            # Check service status
            status = qwen25vl_service.get_status()
            print(f"   Service status: {status}")
            
        except ImportError as e:
            print(f"‚ùå Failed to import Qwen service: {e}")
            return False
        
        # Test 3: Test prompt generation with different analysis types
        print("\n3Ô∏è‚É£ Testing prompt generation with different analysis types...")
        analysis_types = [
            "comprehensive_analysis",
            "safety_investigation", 
            "performance_analysis",
            "pattern_detection",
            "creative_review"
        ]
        
        for analysis_type in analysis_types:
            try:
                prompt = generate_analysis_prompt(analysis_type, "test focus")
                print(f"   ‚úÖ {analysis_type}: {len(prompt)} chars")
            except Exception as e:
                print(f"   ‚ùå {analysis_type}: {e}")
        
        # Test 4: Test model manager integration
        print("\n4Ô∏è‚É£ Testing model manager integration...")
        try:
            from services.model_manager import model_manager
            print("‚úÖ Model manager imported successfully")
            
            # Check available models
            available_models = model_manager.get_available_models()
            print(f"   Available models: {list(available_models.keys())}")
            
        except ImportError as e:
            print(f"‚ùå Failed to import model manager: {e}")
            return False
        
        print("\nüéâ All tests passed! Qwen service is ready to use with analysis templates.")
        return True
        
    except Exception as e:
        print(f"‚ùå Test failed with error: {e}")
        return False

async def test_prompt_generation():
    """Test specific prompt generation scenarios"""
    try:
        print("\nüîç Testing specific prompt generation scenarios...")
        
        from analysis_templates import generate_analysis_prompt
        
        # Test scenarios
        test_scenarios = [
            ("comprehensive_analysis", "vehicle safety and performance"),
            ("safety_investigation", "workplace safety violations"),
            ("performance_analysis", "athletic performance optimization"),
            ("pattern_detection", "behavioral patterns in crowds"),
            ("creative_review", "advertising campaign effectiveness")
        ]
        
        for analysis_type, user_focus in test_scenarios:
            try:
                prompt = generate_analysis_prompt(analysis_type, user_focus)
                
                # Check if prompt contains expected elements
                if "AGENT ANALYSIS PROTOCOL" in prompt or "AGENT" in prompt:
                    print(f"   ‚úÖ {analysis_type}: Contains agent protocol")
                else:
                    print(f"   ‚ö†Ô∏è {analysis_type}: Missing agent protocol")
                
                # Check if user focus is included
                if user_focus in prompt:
                    print(f"   ‚úÖ {analysis_type}: User focus included")
                else:
                    print(f"   ‚ö†Ô∏è {analysis_type}: User focus not found")
                    
            except Exception as e:
                print(f"   ‚ùå {analysis_type}: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Prompt generation test failed: {e}")
        return False

async def main():
    """Main test function"""
    print("üöÄ Qwen Service Analysis Templates Test")
    print("=" * 50)
    
    # Run tests
    success1 = await test_qwen_service()
    success2 = await test_prompt_generation()
    
    if success1 and success2:
        print("\nüéØ All tests completed successfully!")
        print("‚úÖ Qwen service is properly integrated with analysis templates")
        print("‚úÖ Prompt system matches the old project structure")
        print("‚úÖ Ready for video analysis with enhanced prompts")
    else:
        print("\n‚ùå Some tests failed. Please check the errors above.")
        return 1
    
    return 0

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã Test interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        sys.exit(1) 